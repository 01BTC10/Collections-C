{"name":"Collections-C","tagline":"Library of standard containers like hashtables, lists, dynamic arrays, sets, queues, etc...","body":"Collections-C\r\n=============\r\n\r\nA library of generic container types including a list, vector, hashtable, deque etc..\r\n\r\n####Dependencies\r\n- gcc\r\n- autoconf\r\n- automake\r\n- libtool\r\n- m4\r\n\r\nThese packages can usually be installed through your distributions package manager.\r\n\r\nBuilding on windows requires [MinGW](http://mingw.org) which provides all the tools needed to build the project.\r\n\r\n#### Building the project\r\nIn the project directory, run the following commands: `./autogen.sh` then run `./configure`. If autogen complains that it couldn't find a directory named \"m4\", run: `mkdir m4` and then `./autogen.sh`.  \r\n\r\nAt this point we should be able to build the project by running:\r\n```\r\nmake\r\n```\r\nThe tests can be run by:\r\n```\r\nmake check\r\n```\r\n\r\n#### Examples\r\n\r\nHashTable:  \r\n```c\r\nHashTable *table = hashtable_new();\r\n\r\nhashtable_add(table, \"some_key\", \"some_value\");\r\nhashtable_add(table, \"foo\", \"bar\");\r\n\r\nchar *value   = hashtable_get(\"foo\");    // returns \"bar\"\r\nchar *removed = hashtable_remove(\"foo\"); // removes the key and returns the value\r\n\r\nhashtable_destroy(table);\r\n```\r\nVector (dynamic array):\r\n```c\r\nVector *vec = vector_new();\r\n\r\nvector_add(vec, \"foo\");\r\nvector_add(vec, \"bar\");\r\nvector_add(vec, \"baz\");\r\n\r\nchar *foo = vector_get(vec, 0);\r\nchar *baz = vector_get(vec, 2);\r\n\r\nchar *removed = vector_remove_at(vec, 1);\r\n\r\nvector_destroy(vec);\r\n```\r\nTreeSet (sorted set):\r\n```c\r\nint cmp(void *e1, void *e2) {\r\n    if (*((int*) e1) < *((int*) e2)) return -1;\r\n    if (*((int*) e1) > *((int*) e2)) return 1;\r\n    return 0;\r\n}\r\n\r\nTreeSet *set = treeset_new(cmp);\r\n\r\nint a = 1;\r\nint b = 2;\r\nint c = 3;\r\n\r\ntreeset_add(set, &c);\r\ntreeset_add(set, &d);\r\ntreeset_add(set, &a);\r\ntreeset_add(set, &c); // does nothing since the element is already in the set\r\n\r\nint first = *((int*) treeset_get_first(set)); // the set is sorted so this returns a\r\n\r\ntreeset_destroy(set);\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}